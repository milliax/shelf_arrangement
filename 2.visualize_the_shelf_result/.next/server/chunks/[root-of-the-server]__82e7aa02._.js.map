{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///home/max/workspace/shelf_arrangement/2.visualize_the_shelf_result/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '../generated/prisma'\n\ndeclare global {\n  var prisma: PrismaClient | undefined\n}\n\nexport const prisma =\n  globalThis.prisma ??\n  new PrismaClient({\n    log: ['query'],\n  })\n\nif (process.env.NODE_ENV !== 'production') globalThis.prisma = prisma"],"names":[],"mappings":";;;;;;;;;;AAMO,MAAM,SACX,WAAW,MAAM,IACjB,IAAI,aAAa;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,WAAW,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":["file:///home/max/workspace/shelf_arrangement/2.visualize_the_shelf_result/src/app/api/shelves/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\nimport { prisma } from '@/lib/prisma'\n\nexport async function GET() {\n  try {\n    const shelves = await prisma.shelves.findMany({\n      include: {\n        inventory_placements: {\n          include: {\n            inventories: true\n          }\n        }\n      },\n      orderBy: {\n        shelf_id: 'asc'\n      }\n    })\n\n    return NextResponse.json(shelves)\n  } catch (error) {\n    console.error('Error fetching shelves:', error)\n    return NextResponse.json({ error: 'Failed to fetch shelves' }, { status: 500 })\n  }\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,UAAU,MAAM,gIAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;YAC5C,SAAS;gBACP,sBAAsB;oBACpB,SAAS;wBACP,aAAa;oBACf;gBACF;YACF;YACA,SAAS;gBACP,UAAU;YACZ;QACF;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,gJAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA0B,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACF","debugId":null}}]
}